// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Minio.FileSystem.Backend;

#nullable disable

namespace Minio.FileSystem.Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Minio.FileSystem.Backend.FileSystemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("FileSystems");
                });

            modelBuilder.Entity("Minio.FileSystem.Backend.FileSystemItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FileSystemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FileSystemItemType")
                        .HasColumnType("int");

                    b.Property<string>("MetaProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<long?>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<string>("VirtualPath")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FileSystemId");

                    b.HasIndex("TenantId");

                    b.HasIndex("VirtualPath");

                    b.ToTable("FileSystemItems");
                });

            modelBuilder.Entity("Minio.FileSystem.Backend.FileSystemItemEntity", b =>
                {
                    b.HasOne("Minio.FileSystem.Backend.FileSystemEntity", "FileSystem")
                        .WithMany("FileSystemItems")
                        .HasForeignKey("FileSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileSystem");
                });

            modelBuilder.Entity("Minio.FileSystem.Backend.FileSystemEntity", b =>
                {
                    b.Navigation("FileSystemItems");
                });
#pragma warning restore 612, 618
        }
    }
}
